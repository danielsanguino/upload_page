import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:io';
import 'dart:convert';
import 'package:csv/csv.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';

class UploadPage extends StatefulWidget {
  final String userId;

  const UploadPage({Key? key, required this.userId}) : super(key: key);

  @override
  _UploadPageState createState() => _UploadPageState();
}

class _UploadPageState extends State<UploadPage> {
  bool _isUploadButtonEnabled = false;
  bool _isNextButtonEnabled = false;
  bool _isMergeButtonEnabled = false;
  double _mergeProgress = 0.0;
  double _uploadProgress = 0.0;
  String _fileContent = '';
  List<String> _statusMessages = [];
  late Timer _usbCheckTimer;

  @override
  void initState() {
    super.initState();
    _requestPermission();
    _checkUsbStorage();
    _startUsbCheckTimer();
  }

  void _startUsbCheckTimer() {
    _usbCheckTimer = Timer.periodic(Duration(seconds: 5), (timer) {
      _checkUsbStorage();
    });
  }

  @override
  void dispose() {
    _usbCheckTimer.cancel();
    super.dispose();
  }

  Future<void> _requestPermission() async {
    var status = await Permission.storage.status;
    status = await Permission.storage.request();
    if (!status.isGranted) {
      print('Storage permission denied');
      return;
    } else {
      print('Storage permission granted');
      _checkUsbStorage();
    }
  }

  Future<void> _checkUsbStorage() async {
    final directoryPath = '/mnt/media_rw/42C5-B60E';
    final filePath = '$directoryPath/sample.txt';

    if (await Directory(directoryPath).exists()) {
      if (await File(filePath).exists()) {
        final fileContent = await File(filePath).readAsString();
        setState(() {
          _fileContent = fileContent;
          _isMergeButtonEnabled = true;
        });
      } else {
        setState(() {
          _fileContent = 'sample.txt not found.';
        });
        _showSampleFileDialog();
      }
    } else {
      setState(() {
        _isMergeButtonEnabled = false;
      });
      _showUsbDialog();
    }
  }

  void _showUsbDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('USB Storage not detected'),
          content: Text('Please insert a USB storage device to continue.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _checkUsbStorage(); // Check again after closing the dialog
              },
              child: Text('Retry'),
            ),
          ],
        );
      },
    );
  }

  void _showSampleFileDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('sample.txt not found'),
          content: Text('Please make sure the USB storage device contains a sample.txt file.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _checkUsbStorage(); // Check again after closing the dialog
              },
              child: Text('Retry'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _convertTsvToCsv(File tsvFile, Directory mergedDir) async {
    final input = tsvFile.openRead();
    final fields = await input
        .transform(utf8.decoder)
        .transform(LineSplitter())
        .map((line) => line.split('\t'))
        .toList();

    String csv = const ListToCsvConverter().convert(fields);

    String fileName = tsvFile.uri.pathSegments.last.replaceAll('.tsv', '.csv');
    File csvFile = File('${mergedDir.path}/$fileName');

    await csvFile.writeAsString(csv);

    setState(() {
      _statusMessages.add('Converted $fileName to CSV and saved in Merged directory.');
    });

    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text('TSV file ${tsvFile.uri.pathSegments.last} converted to CSV and saved in Merged directory.'),
    ));
  }

  Future<void> _startMerge() async {
  if (!_isMergeButtonEnabled) {
    _showUsbDialog();
    return;
  }

  setState(() {
    _mergeProgress = 0.0;
    _isUploadButtonEnabled = false;
    _statusMessages.clear(); // Clear previous status messages
  });

  final usbDirectoryPath = '/mnt/media_rw/42C5-B60E';
  final documentsDir = Directory('/storage/emulated/0/Documents');
  final mergedDir = Directory('${documentsDir.path}/Merged');
  final usbDirectory = Directory(usbDirectoryPath);

  // Ensure directories exist
  if (!await documentsDir.exists()) {
    await documentsDir.create(recursive: true);
  }
  if (!await mergedDir.exists()) {
    await mergedDir.create(recursive: true);
  }

  if (await usbDirectory.exists()) {
    List<FileSystemEntity> files = usbDirectory.listSync();
    int totalFiles = files.where((file) => file is File && file.path.endsWith('.tsv')).length;
    int processedFiles = 0;

    for (FileSystemEntity file in files) {
      if (file is File && file.path.endsWith('.tsv')) {
        final fileName = file.uri.pathSegments.last;
        final copiedFilePath = '${documentsDir.path}/$fileName';

        try {
          // Copy the file to Documents directory
          await file.copy(copiedFilePath);
          setState(() {
            _statusMessages.add('Copied $fileName to Documents directory.');
          });

          // Convert and save to Merged directory
          await _convertTsvToCsv(File(copiedFilePath), mergedDir);
          

        } catch (e) {
          print('Error processing $fileName: $e');
          setState(() {
            _statusMessages.add('Error processing $fileName.');
          });
        }

        processedFiles++;
        setState(() {
          _mergeProgress = processedFiles / totalFiles;
        });
      }
    }

    Timer.periodic(Duration(milliseconds: 100), (timer) {
      setState(() {
        _mergeProgress += 0.01;
        if (_mergeProgress >= 1.0) {
          _mergeProgress = 1.0;
          timer.cancel();
          _isUploadButtonEnabled = true;
        }
      });
    });
  } else {
    _showUsbDialog();
  }
}



  void _startUpload() {
    setState(() {
      _uploadProgress = 0.0;
      _isNextButtonEnabled = false;
    });

    Timer.periodic(Duration(milliseconds: 100), (timer) {
      setState(() {
        _uploadProgress += 0.01;
        if (_uploadProgress >= 1.0) {
          _uploadProgress = 1.0;
          _isNextButtonEnabled = true;
          timer.cancel();
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color.fromARGB(255, 132, 170, 224),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Container(
                  width: double.infinity,
                  padding: EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text(
                          'Upload Data',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 24.0,
                            fontWeight: FontWeight.bold,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      SizedBox(height: 50),
                      Center(
                        child: ElevatedButton(
                          onPressed: _isMergeButtonEnabled ? _startMerge : null,
                          child: Text('Merge'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: _isMergeButtonEnabled
                                ? Colors.blue
                                : Colors.grey,
                            padding: EdgeInsets.symmetric(
                                vertical: 24.0, horizontal: 100.0),
                            textStyle: TextStyle(fontSize: 20),
                          ),
                        ),
                      ),
                      SizedBox(height: 30),
                      Center(
                        child: ElevatedButton(
                          onPressed:
                              _isUploadButtonEnabled ? _startUpload : null,
                          child: Text('Upload'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: _isUploadButtonEnabled
                                ? Colors.blue
                                : Colors.grey,
                            padding: EdgeInsets.symmetric(
                                vertical: 24.0, horizontal: 100.0),
                            textStyle: TextStyle(fontSize: 20),
                          ),
                        ),
                      ),
                      SizedBox(height: 50),
                      LinearProgressIndicator(
                        value: _mergeProgress,
                        backgroundColor: Colors.grey[300],
                        valueColor: AlwaysStoppedAnimation<Color>(
                            Color.fromARGB(255, 122, 231, 112)),
                        minHeight: 50.0, // Increase thickness
                      ),
                      SizedBox(height: 30),
                      LinearProgressIndicator(
                        value: _uploadProgress,
                        backgroundColor: Colors.grey[300],
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.green),
                        minHeight: 50.0, // Increase thickness
                      ),
                      SizedBox(height: 30),
                      Container(
                        padding: EdgeInsets.all(16.0),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(8.0),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              spreadRadius: 2,
                              blurRadius: 4,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: _statusMessages
                              .map((message) => Padding(
                                    padding: const EdgeInsets.symmetric(vertical: 4.0),
                                    child: Text(
                                      message,
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 14.0,
                                      ),
                                    ),
                                  ))
                              .toList(),
                        ),
                      ),
                      SizedBox(height: 50),
                      Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text(
                          _fileContent,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 16.0,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
